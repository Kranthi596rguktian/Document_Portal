import sys
import os
import streamlit as st
from pathlib import Path

from operator import itemgetter
from typing import List, Optional, Dict, Any

from langchain_core.messages import BaseMessage
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import ChatPromptTemplate
from langchain_community.vectorstores import FAISS
from langchain.chains import create_history_aware_retriever, create_retrieval_chain
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_community.chat_message_histories.in_memory import ChatMessageHistory


from utils.model_loader import ModelLoader
from exception.custom_exception import DocumentPortalException
from logger.custom_logger import CustomLogger
from prompt.prompt_library import PROMPT_REGISTRY
from model.models import PromptType


class ConversationalRAG:
    def __init__(self,session_id:str,retriever:FAISS):
        try:
            self.log = CustomLogger().get_logger(__file__)
            self.session_id = session_id
            self.retriever = retriever
            self.llm = self._load_llm()
            self.contexulize_prompt = PROMPT_REGISTRY[PromptType.CONTEXTUALIZE_QUESTION.value]
            self.qa_prompt = PROMPT_REGISTRY[PromptType.CONTEXT_QA.value]
            
            self.history_aware_retriever = create_history_aware_retriever(
                self.llm, self.retriever, self.contexulize_prompt
            )
            self.log.info("ConversationalRAG initialized successfully.",session_id=self.session_id) 

            self.qa_chain = create_stuff_documents_chain(self.llm, self.qa_prompt)
            self.rag_chain = create_retrieval_chain(self.history_aware_retriever, self.qa_chain)

            self.log.info("RAG chain created successfully.",chain_type=type(self.rag_chain).__name__)   
            
            self.chain = RunnableWithMessageHistory(
                self.rag_chain, 
                self._get_session_history,
                input_messages_key = 'input',
                history_messages_key = 'chat_history',
                output_message_key = 'output'
            )
        except Exception as e:
            self.log.error(f"Error in ConversationalRAG __init__: {e}")
            raise DocumentPortalException("Error initializing ConversationalRAG", sys)
        
    def _load_llm(self):
        try:
            llm = ModelLoader().load_model()
            self.log.info("LLM loaded successfully.",llm_type=type(llm).__name__)
            return llm
        except Exception as e:
            self.log.error(f"Error in _load_llm: {e}")
            raise DocumentPortalException("Error in _load_llm method", sys)
        
    def _get_session_history(self,session_id : str):
        try:
            if "store" not in st.session_state:
                st.session_state.store = {}
            
            if session_id not in st.session_state.store:
                st.session_state.store[session_id] = ChatMessageHistory()
                self.log.info("New chat session history created", session_id = session_id)
                
            return st.session_state.store[session_id]
        
        except Exception as e:
            self.log.error(f"Error in _get_session_history: {e}")
            raise DocumentPortalException("Error in _get_session_history method", sys)
        
    def load_retriever_from_faiss(self,faiss_index_path:str) -> FAISS:
        try:
            embeddings = ModelLoader().load_embeddings()
            
            if not os.path.exists(faiss_index_path):
                raise DocumentPortalException(f"FAISS index file not found at {faiss_index_path}", sys)
            
            vectorstore = FAISS.load_local(faiss_index_path, embeddings)
            self.log.info("FAISS index loaded successfully.",path=faiss_index_path)
            return vectorstore.as_retriever(search_type="similarity", search_kwargs={"k": 3})
        
        
        except Exception as e:
            self.log.error(f"Error in load_retriever_from_faiss: {e}")
            raise DocumentPortalException("Error in load_retriever_from_faiss method", sys)

    def invoke(self,user_input: str) -> str:
        try:
            response = self.chain.invoke(
                {"input": user_input},
                config = {"configurable" : {"session_id": self.session_id}}
            )
            answer = response.get("answer", "No answer.")
            if not answer:
                self.log.warning("No answer generated by the model.",session_id=self.session_id)
            self.log.info("Response generated successfully.",session_id=self.session_id)
            return answer
            
        except Exception as e:
            self.log.error(f"Error in invoke: {e}")
            raise DocumentPortalException("Error in invoke method", sys)